# # Set the filename for the PNG image
# filename <- "correlation_matrix.png"
# # Open the PNG device
# png(filename)
# print(cor(dsub_set))
#
# # Close the PNG device and save the plot as a PNG file
# dev.off()
print(cor(dsub_set))
main <- paste0(LIB_PATH, "turner_GLDS351_Epiphysis.R")
source(main)
print(cor(dsub_set))
main <- paste0(LIB_PATH, "alwood_LSDS_15.R")
source(main)
print(cor(dsub_set))
main <- paste0(LIB_PATH, "turner_LSDS_30.R")
source(main)
print(cor(dsub_set))
source(main)
# dsub_set <- dsub_set[complete.cases(dsub_set), ] # remove row
dsub_set <- dsub_set[, 1:(ncol(dsub_set) - 2)] # remove col
# Graphviz plot attributes
graph_attrs <- list(rankdir = "BT", size = "5,5", bgcolor = "white")
# node_attrs <- list(fontcolor = "black", shape = "circle", style = "filled", fillcolor = "lightyellow")
node_attrs <- list ()
edge_attrs <- list(color = "black")
# Plot the DAG
plot_dag <- function(graph, algo){
plot_title <- paste0(algo, " ")
plot(graph, attrs = list(graph = graph_attrs, node = node_attrs, edge = edge_attrs))
title(plot_title, line = -1, cex.main = 2)
}
title <- "Ko"
png(filename = paste0(title,".png"))
dag <- h2pc(dsub_set)
graph <- as.graphNEL(dag)
plot_dag(graph, "H2PC")
dev.off()
print(cor(dsub_set))
# Assuming you have a correlation matrix named 'cor_matrix'
# # Set the filename for the PNG image
# filename <- "correlation_matrix.png"
# # Open the PNG device
# png(filename)
# # Close the PNG device and save the plot as a PNG file
# dev.off()
print(cor(dsub_set))
main <- paste0(LIB_PATH, "ko.R")
main <- paste0(LIB_PATH, "ko.R")
source(main)
# dsub_set <- dsub_set[complete.cases(dsub_set), ] # remove row
dsub_set <- dsub_set[, 1:(ncol(dsub_set) - 2)] # remove col
# Graphviz plot attributes
graph_attrs <- list(rankdir = "BT", size = "5,5", bgcolor = "white")
# node_attrs <- list(fontcolor = "black", shape = "circle", style = "filled", fillcolor = "lightyellow")
node_attrs <- list ()
edge_attrs <- list(color = "black")
# Plot the DAG
plot_dag <- function(graph, algo){
plot_title <- paste0(algo, " ")
plot(graph, attrs = list(graph = graph_attrs, node = node_attrs, edge = edge_attrs))
title(plot_title, line = -1, cex.main = 2)
}
title <- "Ko"
png(filename = paste0(title,".png"))
dag <- h2pc(dsub_set)
graph <- as.graphNEL(dag)
plot_dag(graph, "H2PC")
dev.off()
print(cor(dsub_set))
# Assuming you have a correlation matrix named 'cor_matrix'
# # Set the filename for the PNG image
# filename <- "correlation_matrix.png"
# # Open the PNG device
# png(filename)
# # Close the PNG device and save the plot as a PNG file
# dev.off()
# Keep only 0%, 60%, and 80% unloaded animals
ko <- ko[ko$unload %in% c(0, 60, 80), ]
source(main)
# dsub_set <- dsub_set[complete.cases(dsub_set), ] # remove row
dsub_set <- dsub_set[, 1:(ncol(dsub_set) - 2)] # remove col
# Graphviz plot attributes
graph_attrs <- list(rankdir = "BT", size = "5,5", bgcolor = "white")
# node_attrs <- list(fontcolor = "black", shape = "circle", style = "filled", fillcolor = "lightyellow")
node_attrs <- list ()
edge_attrs <- list(color = "black")
# Plot the DAG
plot_dag <- function(graph, algo){
plot_title <- paste0(algo, " ")
plot(graph, attrs = list(graph = graph_attrs, node = node_attrs, edge = edge_attrs))
title(plot_title, line = -1, cex.main = 2)
}
title <- "Ko"
png(filename = paste0(title,".png"))
dag <- h2pc(dsub_set)
graph <- as.graphNEL(dag)
plot_dag(graph, "H2PC")
dev.off()
print(cor(dsub_set))
# Assuming you have a correlation matrix named 'cor_matrix'
# # Set the filename for the PNG image
# filename <- "correlation_matrix.png"
# # Open the PNG device
# png(filename)
# # Close the PNG device and save the plot as a PNG file
# dev.off()
# Load packages
library(bnlearn)
library(Rgraphviz)
library(psych)
library(lavaan)
library(mltools)
library(data.table)
# Set data path
DATA_PATH <- paste0(getwd(), "/../data/")
LIB_PATH <- paste0(getwd(), "/lib/")
OUT_PATH <- paste0(getwd(), "/../graphs/")
PLOT <- paste0(LIB_PATH, "plot_IAMB.R")
FULL_OUT_PATH <- paste0(OUT_PATH, "/Single Node PCA/") # Change accordingly
dataset <- datasets[1]
datasets <- c("lauren.R", "turner_GLDS351_Epiphysis.R", "turner_LSDS_30.R", "ko.R", "alwood_LSDS_15.R")
dataset <- datasets[1]
load_Dataset <- paste0(LIB_PATH, dataset)
source(load_Dataset)
dag <- h2pc(dsub_set)
source(PLOT)
library(DiagrammeR)
library(DOT)
names(graph)
graph@nodes
fe_column_names <- graph@nodes[grep("Fe", graph@nodes)]
graph@nodes
fe_column_names <- graph@nodes[grep("Fe", graph@nodes)]
fe_col <- graph@nodes[grep("Fe", graph@nodes)]
print(fe_col)
print(xray_col)
graph@nodes
fe_col <- graph@nodes[grep("Fe", graph@nodes)]
si_col <- graph@nodes[grep("Si", graph@nodes)]
ar_col <- graph@nodes[grep("Ar", graph@nodes)]
xray_col <- graph@nodes[grep("X.ray", graph@nodes)]
print(xray_col)
print(fe_col)
graph@nodes
fe_col <- graph@nodes[grep("Fe", graph@nodes)]
si_col <- graph@nodes[grep("Si", graph@nodes)]
ar_col <- graph@nodes[grep("Ar", graph@nodes)]
xray_col <- graph@nodes[grep("X.ray", graph@nodes)]
graph@nodes
fe_col <- graph@nodes[grep("Fe", graph@nodes)]
si_col <- graph@nodes[grep("Si", graph@nodes)]
ar_col <- graph@nodes[grep("Ar", graph@nodes)]
xray_col <- graph@nodes[grep("X.ray", graph@nodes)]
graph@nodes
# graph@nodes
fe_col <- graph@nodes[grep("Fe", graph@nodes)]
si_col <- graph@nodes[grep("Si", graph@nodes)]
ar_col <- graph@nodes[grep("Ar", graph@nodes)]
xray_col <- graph@nodes[grep("X.ray", graph@nodes)]
# graph@nodes
fe_col <- graph@nodes[grep("Fe", graph@nodes)]
si_col <- graph@nodes[grep("Si", graph@nodes)]
ar_col <- graph@nodes[grep("Ar", graph@nodes)]
xray_col <- graph@nodes[grep("X.ray", graph@nodes)]
left <- length(graph@nodes)-(length(fe_col)+ length(si_col) + length(ar_col) + length(xray_col))
print(left)
graph@nodes
# graph@nodes
fe_col <- graph@nodes[grep("Fe", graph@nodes)]
si_col <- graph@nodes[grep("Si", graph@nodes)]
ar_col <- graph@nodes[grep("Ar", graph@nodes)]
xray_col <- graph@nodes[grep("X.ray", graph@nodes)]
left <- length(graph@nodes)-(length(fe_col)+ length(si_col) + length(ar_col) + length(xray_col))
print(left)
# graph@nodes
fe <- graph@nodes[grep("Fe", graph@nodes)]
si <- graph@nodes[grep("Si", graph@nodes)]
ar <- graph@nodes[grep("Ar", graph@nodes)]
xray <- graph@nodes[grep("X.ray", graph@nodes)]
left <- length(graph@nodes)-(length(fe_col)+ length(si_col) + length(ar_col) + length(xray_col))
print(left)
buildColorDict <- function(..., colors=c()) {
stack <- list(...)
if (length(colors) == 0) {
colors <- c("lightcoral","chocolate2","lightyellow","lightgreen","lightblue","purple","seashell")
}
# throw error if len(...) < len(colors)
if (length(stack) > length(colors)) {
err_message <- "There are more PCA groups than provided colors."
stop(err_message)
}
out <- list()
i <- 1
for (pca_group in stack) {
for (node in pca_group) {
out[[node]] <- colors[i]
}
i <- i + 1
}
return(out)
}
convertNELtoStr <- function(dag, colorNodes) { # dag: Formal graphNEL, colorNodes: List
nodes <- dag@nodes
ans <- 'digraph { graph[layout=circo]'
# Add nodes
for (node in nodes) {
if (exists(node, where = colorNodes)) {
ans <- paste0(ans,'"',node,'" [fillcolor=', colorNodes[[node]], ', style=filled];')
} else {
ans <- paste0(ans,'"',node,'";')
}
}
# Add edges
for (node in nodes) {
for (out_node_index in dag@edgeL[[node]]$edges) {
ans <- paste0(ans,'"', node,'" -> "', nodes[out_node_index], '";')
}
}
ans <- paste0(ans,'}')
return(ans)
}
# alt_colors <- c("lightyellow","lightgreen")
ColoredNodes <- buildColorDict(si,ar,fe,xray)
answer <- convertNELtoStr(graph, ColoredNodes)
grViz(answer)
dot(answer, file = "test.svg")
# Example DOT Graph
graph2 <- grViz ("
digraph {
A [fillcolor=lightyellow, style=filled];
B [fillcolor=blue, style=filled];
C [fillcolor=green, style=filled];
'A' -> B;
B -> C;
C -> A;
}")
graph2
PLOT <- paste0(LIB_PATH, "plot_Color.R")
library(DiagrammeR)
library(DOT)
DATA_PATH <- paste0(getwd(), "/../data/")
LIB_PATH <- paste0(getwd(), "/lib/")
OUT_PATH <- paste0(getwd(), "/../graphs/")
PLOT <- paste0(LIB_PATH, "plot_Color.R")
FULL_OUT_PATH <- paste0(OUT_PATH, "/Single Node PCA/") # Change accordingly
source(PLOT)
# graph@nodes
fe <- graph@nodes[grep("Fe", graph@nodes)]
si <- graph@nodes[grep("Si", graph@nodes)]
ar <- graph@nodes[grep("Ar", graph@nodes)]
xray <- graph@nodes[grep("X.ray", graph@nodes)]
left <- length(graph@nodes)-(length(fe_col)+ length(si_col) + length(ar_col) + length(xray_col))
print(left)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
answer <- convertNELtoStr(graph, ColoredNodes)
grViz(answer)
dot(answer, file = "test.svg")
source(PLOT)
source(PLOT)
datasets <- c("lauren.R", "turner_GLDS351_Epiphysis.R", "turner_LSDS_30.R", "ko.R", "alwood_LSDS_15.R")
dataset <- datasets[1]
load_Dataset <- paste0(LIB_PATH, dataset)
source(load_Dataset)
dag <- h2pc(dsub_set)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
FULL_OUT_PATH <- paste0(OUT_PATH, "Single Node PCA/") # Change accordingly
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
dot_string <- convertNELtoStr(graph, ColoredNodes)
file_name <- paste0(FULL_OUT_PATH,title,".svg")
dot(dot_string,file=file_name)
file_name <- paste0(title,".svg")
dot(dot_string,file=file_name)
file_name <- paste0(OUT_PATH,title,".svg")
dot(dot_string,file=file_name)
DOT_OUT_PATH <- paste0("/../graphs/","Single Node PCA/")
file_name <- paste0(DOT_OUT_PATH,title,".svg")
dot(dot_string,file=file_name)
DOT_OUT_PATH <- paste0("/../graphs/Single Node PCA/") # Relative out path for DOT package
library(DiagrammeR)
library(DOT)
DATA_PATH <- paste0(getwd(), "/../data/")
LIB_PATH <- paste0(getwd(), "/lib/")
OUT_PATH <- paste0(getwd(), "/../graphs/")
FULL_OUT_PATH <- paste0(OUT_PATH, "Single Node PCA/") # Change accordingly
PLOT <- paste0(LIB_PATH, "plot_Color.R")
DOT_OUT_PATH <- paste0("/../graphs/Single Node PCA/") # Relative out path for DOT package
source(PLOT)
datasets <- c("lauren.R", "turner_GLDS351_Epiphysis.R", "turner_LSDS_30.R", "ko.R", "alwood_LSDS_15.R")
dataset <- datasets[1]
load_Dataset <- paste0(LIB_PATH, dataset)
source(load_Dataset)
dag <- h2pc(dsub_set)
# graph@nodes
fe <- graph@nodes[grep("Fe", graph@nodes)]
si <- graph@nodes[grep("Si", graph@nodes)]
ar <- graph@nodes[grep("Ar", graph@nodes)]
xray <- graph@nodes[grep("X.ray", graph@nodes)]
left <- length(graph@nodes)-(length(fe_col)+ length(si_col) + length(ar_col) + length(xray_col))
print(left)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
# graph@nodes
fe <- graph@nodes[grep("Fe", graph@nodes)]
si <- graph@nodes[grep("Si", graph@nodes)]
ar <- graph@nodes[grep("Ar", graph@nodes)]
xray <- graph@nodes[grep("X.ray", graph@nodes)]
remaining_vars <- length(graph@nodes)-(length(fe_col)+ length(si_col) + length(ar_col) + length(xray_col))
print(remaining_vars)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
source(PLOT)
datasets <- c("lauren.R", "turner_GLDS351_Epiphysis.R", "turner_LSDS_30.R", "ko.R", "alwood_LSDS_15.R")
dataset <- datasets[1]
load_Dataset <- paste0(LIB_PATH, dataset)
source(load_Dataset)
dag <- h2pc(dsub_set)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=FALSE)
source(PLOT)
datasets <- c("lauren2.R", "lauren.R", "turner_GLDS351_Epiphysis.R", "turner_LSDS_30.R", "ko.R", "alwood_LSDS_15.R")
dataset <- datasets[1]
load_Dataset <- paste0(LIB_PATH, dataset)
source(load_Dataset)
dag <- h2pc(dsub_set)
# graph@nodes
fe <- graph@nodes[grep("Fe", graph@nodes)]
si <- graph@nodes[grep("Si", graph@nodes)]
ar <- graph@nodes[grep("Ar", graph@nodes)]
xray <- graph@nodes[grep("X.ray", graph@nodes)]
remaining_vars <- length(graph@nodes)-(length(fe_col)+ length(si_col) + length(ar_col) + length(xray_col))
print(remaining_vars)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
FULL_OUT_PATH <- paste0(OUT_PATH, "Full Nodes/") # Change accordingly
library(DiagrammeR)
library(DOT)
DATA_PATH <- paste0(getwd(), "/../data/")
LIB_PATH <- paste0(getwd(), "/lib/")
OUT_PATH <- paste0(getwd(), "/../graphs/")
FULL_OUT_PATH <- paste0(OUT_PATH, "Full Nodes/") # Change accordingly
PLOT <- paste0(LIB_PATH, "plot_Color.R")
DOT_OUT_PATH <- paste0("/../graphs/Full Nodes/") # Relative out path for DOT package
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
source(load_Dataset)
source(PLOT)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
source("C:/Users/brand/OneDrive/Documents/DAG_ML/hpc/src/lib/plot_Color.R", echo=TRUE)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
source("C:/Users/brand/OneDrive/Documents/DAG_ML/hpc/src/lib/plot_Color.R", echo=TRUE)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
source("C:/Users/brand/OneDrive/Documents/DAG_ML/hpc/src/lib/plot_Color.R", echo=TRUE)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
source("C:/Users/brand/OneDrive/Documents/DAG_ML/hpc/src/lib/plot_Color.R", echo=TRUE)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
names(LaurenD)
names(laurenD)
source("C:/Users/brand/OneDrive/Documents/DAG_ML/hpc/src/lib/lauren2.R", echo=TRUE)
laur <- paste0(DATA_PATH, "lauren/drop_38b_chr_col_assoc_500.csv")
laurenD <- read.csv(laur, header = TRUE, stringsAsFactors = FALSE)
# graph@nodes # Use not graph@nodes
fe <- graph@nodes[grep("Fe", names(laurenD))]
si <- graph@nodes[grep("Si", names(laurenD))]
ar <- graph@nodes[grep("Ar", names(laurenD))]
xray <- graph@nodes[grep("X.ray", names(laurenD))]
si <- pca(laurenD[,si], nfactors = 1, scale. = TRUE)
laur <- paste0(DATA_PATH, "lauren/drop_38b_chr_col_assoc_500.csv")
laurenD <- read.csv(laur, header = TRUE, stringsAsFactors = FALSE)
# graph@nodes # Use not graph@nodes
fe <- graph@nodes[grep("Fe", names(laurenD))]
si <- graph@nodes[grep("Si", names(laurenD))]
ar <- graph@nodes[grep("Ar", names(laurenD))]
xray <- graph@nodes[grep("X.ray", names(laurenD))]
si <- pca(laurenD[,si], nfactors = 2, scale. = TRUE)
source("C:/Users/brand/OneDrive/Documents/DAG_ML/hpc/src/lib/lauren2.R", echo=TRUE)
laur <- paste0(DATA_PATH, "lauren/drop_38b_chr_col_assoc_500.csv")
laurenD <- read.csv(laur, header = TRUE, stringsAsFactors = FALSE)
# graph@nodes # Use not graph@nodes
fe <- graph@nodes[grep("Fe", names(laurenD))]
si <- graph@nodes[grep("Si", names(laurenD))]
ar <- graph@nodes[grep("Ar", names(laurenD))]
xray <- graph@nodes[grep("X.ray", names(laurenD))]
si <- pca(laurenD[,si], nfactors = 2, scale. = TRUE)
laur <- paste0(DATA_PATH, "lauren/drop_38b_chr_col_assoc_500.csv")
laurenD <- read.csv(laur, header = TRUE, stringsAsFactors = FALSE)
# graph@nodes # Use not graph@nodes
fe <- graph@nodes[grep("Fe", names(laurenD))]
si <- graph@nodes[grep("Si", names(laurenD))]
ar <- graph@nodes[grep("Ar", names(laurenD))]
xray <- graph@nodes[grep("X.ray", names(laurenD))]
si <- pca(laurenD[,si], nfactors = 2, scale. = TRUE)
source("C:/Users/brand/OneDrive/Documents/DAG_ML/hpc/src/lib/lauren2.R", echo=TRUE)
laur <- paste0(DATA_PATH, "lauren/drop_38b_chr_col_assoc_500.csv")
laurenD <- read.csv(laur, header = TRUE, stringsAsFactors = FALSE)
# graph@nodes # Use not graph@nodes
fe <- graph@nodes[grep("Fe", names(laurenD))]
si <- graph@nodes[grep("Si", names(laurenD))]
ar <- graph@nodes[grep("Ar", names(laurenD))]
xray <- graph@nodes[grep("X.ray", names(laurenD))]
si <- pca(laurenD[,si], nfactors = 2)
View(si)
View(si)
FULL_OUT_PATH <- paste0(OUT_PATH, "Full Nodes/") # Change accordingly
library(DiagrammeR)
library(DOT)
DATA_PATH <- paste0(getwd(), "/../data/")
LIB_PATH <- paste0(getwd(), "/lib/")
OUT_PATH <- paste0(getwd(), "/../graphs/")
FULL_OUT_PATH <- paste0(OUT_PATH, "Full Nodes/") # Change accordingly
PLOT <- paste0(LIB_PATH, "plot_Color.R")
DOT_OUT_PATH <- paste0("/../graphs/Full Nodes/") # Relative out path for DOT package
source(PLOT)
datasets <- c("lauren2.R", "lauren.R", "turner_GLDS351_Epiphysis.R", "turner_LSDS_30.R", "ko.R", "alwood_LSDS_15.R")
dataset <- datasets[1]
load_Dataset <- paste0(LIB_PATH, dataset)
source(load_Dataset)
source(PLOT)
datasets <- c("lauren2.R", "lauren.R", "turner_GLDS351_Epiphysis.R", "turner_LSDS_30.R", "ko.R", "alwood_LSDS_15.R")
dataset <- datasets[1]
load_Dataset <- paste0(LIB_PATH, dataset)
source(load_Dataset)
dag <- h2pc(dsub_set)
library(DiagrammeR)
library(DOT)
library(bnlearn)
DATA_PATH <- paste0(getwd(), "/../data/")
LIB_PATH <- paste0(getwd(), "/lib/")
OUT_PATH <- paste0(getwd(), "/../graphs/")
FULL_OUT_PATH <- paste0(OUT_PATH, "Full Nodes/") # Change accordingly
PLOT <- paste0(LIB_PATH, "plot_Color.R")
DOT_OUT_PATH <- paste0("/../graphs/Full Nodes/") # Relative out path for DOT package
source(PLOT)
datasets <- c("lauren2.R", "lauren.R", "turner_GLDS351_Epiphysis.R", "turner_LSDS_30.R", "ko.R", "alwood_LSDS_15.R")
dataset <- datasets[1]
load_Dataset <- paste0(LIB_PATH, dataset)
source(load_Dataset)
dag <- h2pc(dsub_set)
# graph@nodes
fe <- graph@nodes[grep("Fe", graph@nodes)]
si <- graph@nodes[grep("Si", graph@nodes)]
ar <- graph@nodes[grep("Ar", graph@nodes)]
xray <- graph@nodes[grep("X.ray", graph@nodes)]
remaining_vars <- length(graph@nodes)-(length(fe_col)+ length(si_col) + length(ar_col) + length(xray_col))
# graph@nodes
fe <- graph@nodes[grep("Fe", graph@nodes)]
si <- graph@nodes[grep("Si", graph@nodes)]
ar <- graph@nodes[grep("Ar", graph@nodes)]
xray <- graph@nodes[grep("X.ray", graph@nodes)]
# remaining_vars <- length(graph@nodes)-(length(fe_col)+ length(si_col) + length(ar_col) + length(xray_col))
print(remaining_vars)
# graph@nodes
fe <- graph@nodes[grep("Fe", graph@nodes)]
si <- graph@nodes[grep("Si", graph@nodes)]
ar <- graph@nodes[grep("Ar", graph@nodes)]
xray <- graph@nodes[grep("X.ray", graph@nodes)]
# remaining_vars <- length(graph@nodes)-(length(fe_col)+ length(si_col) + length(ar_col) + length(xray_col))
# print(remaining_vars)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
source(PLOT)
datasets <- c("lauren2.R", "lauren.R", "turner_GLDS351_Epiphysis.R", "turner_LSDS_30.R", "ko.R", "alwood_LSDS_15.R")
dataset <- datasets[1]
load_Dataset <- paste0(LIB_PATH, dataset)
source(load_Dataset)
dag <- h2pc(dsub_set)
# graph@nodes
fe <- graph@nodes[grep("Fe", graph@nodes)]
si <- graph@nodes[grep("Si", graph@nodes)]
ar <- graph@nodes[grep("Ar", graph@nodes)]
xray <- graph@nodes[grep("X.ray", graph@nodes)]
# remaining_vars <- length(graph@nodes)-(length(fe_col)+ length(si_col) + length(ar_col) + length(xray_col))
# print(remaining_vars)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
source("C:/Users/brand/OneDrive/Documents/DAG_ML/hpc/src/lib/lauren2.R", echo=TRUE)
source("C:/Users/brand/OneDrive/Documents/DAG_ML/hpc/src/lib/lauren2.R", echo=TRUE)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
dsub_set <- laurenD
title <- "OSDR-366 (Lauren)- All"
source(PLOT)
datasets <- c("lauren2.R", "lauren.R", "turner_GLDS351_Epiphysis.R", "turner_LSDS_30.R", "ko.R", "alwood_LSDS_15.R")
dataset <- datasets[1]
load_Dataset <- paste0(LIB_PATH, dataset)
source(load_Dataset)
dag <- h2pc(dsub_set)
ColoredNodes <- buildColorDict(si,ar,fe,xray)
plot_dag2(graph, ColoredNodes,return=TRUE)
library(DiagrammeR)
library(DOT)
library(bnlearn)
DATA_PATH <- paste0(getwd(), "/../data/")
LIB_PATH <- paste0(getwd(), "/lib/")
OUT_PATH <- paste0(getwd(), "/../graphs/")
FULL_OUT_PATH <- paste0(OUT_PATH, "Full Nodes/") # Change accordingly
PLOT <- paste0(LIB_PATH, "plot_Color.R")
DOT_OUT_PATH <- paste0("/../graphs/Full Nodes/") # Relative out path for DOT package
source(PLOT)
datasets <- c("lauren2.R", "lauren.R", "turner_GLDS351_Epiphysis.R", "turner_LSDS_30.R", "ko.R", "alwood_LSDS_15.R")
dataset <- datasets[1]
load_Dataset <- paste0(LIB_PATH, dataset)
source(load_Dataset)
dag <- h2pc(dsub_set)
